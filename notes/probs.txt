Given the two-level distribution,
D =
  { (D1={(A, P[A|D1]), (B, P[B|D1]), (C, P[C|D1])}, P[D1])
  , (D2={(E, P[E|D2]), (F, P[F|D2])}, P[D2])
  }
we'd like to compute,
join D =
  { (A, P[A])
  , (B, P[B])
  , (C, P[C])
  , (E, P[E])
  , (F, P[F])
  }

However, currently we just multiply probabilities down, so we compute:
P[A|D1] * P[D1] = P[A & D1]

Ultimately, our current system computes a slightly different distribution than
the one we'd like:
join' D =
  { (A, P[A & D1])
  , (B, P[B & D1])
  , (C, P[C & D1])
  , (E, P[E & D2])
  , (F, P[F & D2])
  }

Since P[A] = P[A & D1] / P[D1|A], we need to determine P[D1|A] (as of now, we
implicitly assume P[D1|A] = 1).

There are two cases P[D1|A] might not be 1. First, it might be the case that A
is part of both D1 and D2. Then P[D1|A] would certainly not be 1. Also, if the
parser for A would have succeeded if run independently of D1, in a case where D1
fails, that might change P[D1|A]. This case needs more work to formalize.

----

P[D1] = P[parser1 correctly found d1]
P[A|D1] = P[parser2(d1) correctly found A]
P[A] = sum(d) P[parser2(d) correctly found A]

P[D1|A] = P[parser1 correctly finds d1, given that parser2(d) will correctly find A for some d] ???
